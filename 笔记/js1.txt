html
    提供内容
css
    样式，布局
js  
    行为

静态网页 html+css
动态页面 客户端动态网页 html+css+js
        服务器端动态网页
----------------------------Js-------------------------
1.什么是Js?      javascript与java无关
    实现用户的行为，做用户和网页交互
    运行在浏览器上的解释性语言（不需要编译，浏览器认识）
    脚本语言（不需要自己搭建，环境嵌套在html中被浏览器识别）
2.Js的作用
    1.用户和网页交互（购物车的增删改查）
    2.和后台交互（搜索数据）
    3.修改html里面的结构和样式
    4.浏览器事件做出响应
    5.读取html元素
    6.做后端 node.js
3.Nombas 最先提出客户端语言
    网景公司liveScript  sun公司java 
    合并改名为javaScript
4.Js体系
    DOM（document object model）文档对象模型
    BOM（browser object model） 浏览器对象模型
    ECMAScript 欧洲计算机制造者协会 European computer 
    ecma 描述了语言的规范和基本对象
    dom  提供了处理网页内容的方法
    bom  提供了和浏览器交互的方法
5.js的引入
    标签<script>js代码写在内部</script>
    外部<script src="js文件路径" type="text/javascript"></script>
    伪url方式<a href="javascript:alert('woshi')"></a>
    事件属性 on开头的事件 当...时候    <button onclick="alert('shi')">wo</button>
6.引入的位置
    一般写在head内，或者body的结尾标签前面
    区别：js的加载时间不一样
        body的结尾标签前面 html内容显示完才调用js
        head内 先引入js文件，才显示页面内容

7.变量
    1.声明变量var 变量名=值；
        not defined没有声明的变量
        undefuined未定义 声明是变量，没有值
    2.变量的赋值 变量名=值； 左边=右边 右边的值给左边
    3.后面的赋值会覆盖前面的值
    4.访问变量，通过变量名访问值

    js中访问一个数据的时候，会优先考虑是变量名，如果没有声明为变量的字符，访问时会报错not defined没有声明的变量
    变量名的语法规范
    1.大小写敏感
    2.数字，字符串，下划线，特殊字符$组成，但是不可以以数字开头，可以用特殊字符开头
    3.小驼峰写法，下划线 baoXianXiang bao_xian_xiang
    4.不能为关键字
    5.必须有分号（js弱语言，检测语法不严格）
    6.见名知义
8.输出方式
    1.alert（内容）弹出框
        变量，不是变量就应该是对应的值，‘’对应的是字符串，数字对应的是数字
    2.console.log（内容）控制台输出
    3.页面输出 document.write() 网页输出
        window.onload=functiong.(){document.write()}  
        当页面加载完之后写就会清除页面内容只显示自己
    1.内ke容展示位置不一样
    2.语法不一样 alert（）内容不用逗号分开
    3.document.write可以识别html标签
9.输入内容
    弹出框输入
        window.prompt()
        var name=prompt('houjiec')
        document.write(name);
        调用弹出框，在弹出框显示内容
        点确定之后，就把用户输入的内容返回
            内容的数据类型是字符串
10.数据类型
    初始数据类型
        1.数字  number  可以算术运算
        2.字符串  string只要有引号的就是字符串
        3.undefuined未定义 空的
        4.null对象是空值
        5.布尔值 true false
    引用数据类型
        []数组[1,2,3,4,5]
        对象
            {
                属性：值
            }
    typeof 获取数据的类型
            typeof 
            typeof（数据）

11.数据类型的转换
    数据类型的显式转换
        Number（）转换成数字类型 NaN not a number 不是数字
            布尔值转为数字1和0
        String（）转换成字符串类型
        Boolean()
            Boolean(0) false 
            Boolean(除0以外) true
            Boolean('') false
            Boolean('非空')true

    数据类型的隐式转换
        字符串在进行算数运算（- * / %） 隐式转换成数字
12.运算符
    算数运算符 + - * / % ++ --
        
    拼接运算符
        字符串+字符串=字符串字符串
        字符串+数字=字符串数字（数字隐式转换成字符串）
        运算式从左到右
    赋值运算符 (优先级最低)
        左边=右边 右边得到的值给左边
        扩展赋值运算符
            += -= *= /= %=
            x+=1 x=x+1
    关系运算符，用于比较的运算符，返回的结果就是true或者false
        > < ==(等于) ===(类型和值都相等) >= <= !=(不等于) !==(类型和值都不等)
        对于两边数据类型不一样的时候，要转成数字类型再比较
        如果两边都是字符串，转成对应的ASCII编码进行比较，依次比较，只要遇到第一个不一样的就出结果
        字母和数字不比 字母比较用ASCII
        字符串转为数子NaN 空为0
    逻辑运算符 或与非
        或者 ||
         1是整数 或者  2是整数>true
            只要不是全错就是对的
        与  &&
        1是整数 并且是正数
            满足所有就是对的
        非  ！
            非1是整数》1不是整数
            ！true=false
            ！false=true
            去反
        运算符优先级
            非>算术运算符>关系运算符>与>或>赋值运算符

    一元运算符  ++ --  ！
    二元运算符  = + - * / % > >= < <= == === != !==
    三元运算符 ?:
        条件？满足要做的事情：不满足条件做的事情
        a=Number(a);
        a>0 ? console.log('a是正数')：console.log('a不是正数')
        var yuwen=prompt();
            shuxue=prompt();
        yuwen==100&&shuxue==100?alert('去玩'):alert('写作业');
        a是整数？打印是整数：打印不是整数
