    arr[1,2,3];
for(var i=1;i<=被添加的数的个数;i++){
    arr[arr.length]=第i个数
}
    arr.push(a)
代码量减少 重复使用 代码的可读性更高

------------------------------------------------------------------
方法 函数 function
    函数的定义
        函数是由事件驱动或者当他被调用时执行的可重复使用的代码块
    for和函数的区别
    
    函数的作用 
        代码量减少 重复使用 代码的可读性更高  代码的具体实现其他地方做  代码分离 
    函数的定义
        function 函数名(){
            //实现方法的具体代码,可以是任意形式的代码
        }
        函数名 
            1.数字，字母，下划线，特殊字符
            2.见名知意
            3.首字母不大写
            4.小驼峰
            5.不能为关键字和保留字（var if for break continue function else Array ）
        函数的调用
            函数名();
        
        参数
            形参 函数定义时的参数
            实参 函数调用时的参数
            function funName(a,b,c){

            }
            有参函数，无参函数，取决于需求
            调用函数，参数的顺序和个数要和函数定义的一样
        argumnents对象
            存在于函数内部 直接访问 不需要声明
            是一个对象，类似数组 可以通过下标访问参数
            一般情况，当参数个数不确定的时候
        return
            函数返回的值，可以是字母，可以是数字，还可以是表达式
            一个函数只有一个return会生效
            return后面的代码不执行
            如果没有return 默认undefined
        函数的组成
            function 
            函数名字
            参数    ？
            函数体 执行的代码
            return  ？
        函数的注释
            @method 方法名
            @param{参数类型} 参数名 参数说明 声明函数参数
            {Array,Number|String|Boolean|Array}
            第一个参数 数组 给哪个数组添加值
            第二个参数 要给数组添加的值
            @return {返回值的类型} 返回值说明
                {Number}返回数组的长度
        变量提升
            作用域
                全局变量
                    在js中任何一个地方都可以调用 函数外部定义的变量
                    不管用var 或者么用var，ouhna
                    h'na
                局部变量
                    函数内部用var 定义的变量，作用域就是函数内部（意思就是在函数内部才可以访问）
                全局变量和局部变量名字一样 
                    在函数内部用局部变量
                    在函数外部用全局变量
                变量提升
                    变量的声明提升，赋值不提升
                函数的声明会提升 同名函数重复声明 以最后一次声明为准
                函数的执行不提升
            匿名函数
                function(){}
            

