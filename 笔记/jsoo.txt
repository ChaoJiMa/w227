jsoo  ：js 面向对象
术语：  oop面向对象编程
面向对象
  面向过程（函数）  自顶向下，逐步细化
  面向对象  
    三大特点
      封装  重复使用，隐藏内部实现
      继承  共性
      多态  个性

  如何实现面向对象
    类与对象
    类：类是对具体对象的抽象
    对象：是类的一个具体实例
    关系：类是对象的抽象，对象是类的实现
  开发中：
    抽象出类（属性和方法）
    属性：对象的静态特征（变量）
    方法：动态特征（方法）
  使用时,使用具体的实例对象
  实例对象 = new 类（）
  实例对象.属性
  实例对象.方法（）

  js中如何实现面向对象编程
  js中没有类的概念，原型对象来代替类

  new 类() = > 实例对象 继承 类里面的属性和方法(对象继承类)
  new 原型对象()=>实例对象 继承 原型对象的属性和方法(实例对象继承原型对象)
  顶层对象是Object
2.如何创建对象
  2.1 构建函数的形式
    function a(b,c){
      this.b = n,
      this.c = n,
    }
    new a();
  2.2 工厂模式
    function a(b,c){
      var obj = {};
      obj.b = n,
      obj.c = n;
    }
    new a();
  2.3 原型
    function a(){

    }
    a.prototype.name = 'n',
    a.prototype.stuno = '133',
    new a();
  2.4 
    var obj = new Object();
  2.5
    var obj = {}
  2.6
    Object.create() -- 扩展
    var a = new Object(); //创建一个对象没有父类
    var b = Object.create(a.prototype)  //b继承了a的原型
    var c = Object.create(null) //var c = {};

3.
  var obj = new Object();
  obj.name = 'zhangsan';
  obj.homework = function(){

  }
  var obj2 = new Object();
  obj2 = obj;
  obj2.name = 'lisi';
  console.log(obj2.name)// lisi 
  console.log(obj.name)// lisi

  数据类型：原始数据类型与引用类型
  内存存储机制:
  内存划分： 堆 和 栈
    原始类型数据：栈
    引用类型数据：堆
    原始类型复制，是值的复制，互相之间不会影响
    引用类型复制，是内存地址的复制，指向的是同一个地址，会互相影响
    引申出:浅拷贝和深拷贝(引用类型的复制)
      浅拷贝：地址的复制，默认情况
      深拷贝：值的复制
    如何实现数组的深拷贝？
    如何实现对象的深拷贝？
      var arr = {1，2，3}
      var arr2 = arr; //浅拷贝
      var arr2 = [...arr];//深拷贝 最简单的方式es6
      for (var i=0;i<arr.length;i++){ //深拷贝
        arr2[i] = arr[i]
      }
      arr2[0] = 88;
      console.log(arr2) //88，2，3
      console.log(arr)  //1，2，3
    垃圾回收机制(内存)：
      var obj = {name:'zhangsan'}
      obj = null;
      把对象引用设置为null，对象在没有引用的情况下，就会被回收
4.如何扩展模板属性*****************************
  实例对象.__proto__.属性：所有实例对象都具有
  原型对象.prototype.属性：所有继承原型的实例对象都有
    区别
      __proto__：私有变量，ie不支持使用Dom浏览器支持，任何对象都有此属性
      prototype: js专门提供的一个属性，用于操作原型对象，所有浏览器都支持，没有兼容性问题，但是只有函数对象才有此属性
  函数对象：typeof 输出function
  实例对象.__proto__ === 原型对象.prototype //true
5.原型链
  工作模式：从自身出发，一层一层的往上找，直到找到为止
  注: 改变prototype指向，想继承某个原型上的属性和方法，需要使用实例对象
  如：student.prototype = new person('zhangsan',18,'male')
6.对象操作
  6.1 销毁对象
    var a = new Object()
    a=null;
  6.2 删除对象的属性
    delete a.name；
  6.3 检查是否为某个构造函数的实例
    a instanceof 构造函数 返回结果为boolean类型
  6.4 判断某个对象是否包含某个属性
    属性 in 对象
    判断整个原型链上的属性
  6.5 当前实例上是否具有此属性（返回boolean类型）
    对象.hasOwnProperty('属性')
7.变量的作用域
  变量分为：全局变量和局部变量
    全局变量：所有都可以访问
    局部变量：定义的函数内部访问
  变量提升:  全局变量，在最前面
            局部变量，在函数的最前面
  如果函数内部变量，没有写var，会认为是全局变量
注：js中的var变量没有块级作用域
  let 变量
    有块级作用域
    只能声明一次
    声明不会提升
*****************************************************
1.封装
  为什么要封装
    1.1：方便用户重复使用(函数，组件)
    1.2：隐藏内部实现，同时又要考虑暴露接口给用户使用
  函数自执行
    var res = (function{
      var a = 5;
      function getA(){
        return a;
      }
      function setA(num){
        a = num;
      }
    })()
  封装
    1：将对应的代码写到函数中
    2：暴露接口
      2.1：通过window来公开变量和函数
      2.2：通过return 方法进行返回
  封装
    1.隐藏内部实现 //放到一个function
    2.提供用户使用window，return两个方法
    3.提供用户扩展
  安全性，可维护性，可扩展性

2.继承的四种
  2.1 call的继承
    父模板.call(对象[,参数列表])
    注：注意先后顺序，一般写在最前面
  2.2 apply的继承
    父模板.apply(对象[,数组])
  问 call 与 apply 的区别(相同和不同)
    1.都可以实现继承,都至少需要一个参数,且第一个参数必须是一个对象
    2.传参的方法不同
      apply参数是以数组的方式传递
    场景(应用)：
      call：参数个数少，且确定
      apply：参数个数多，或不确定
  3. 原型继承
    子模板.prototype = new 父模板 (参数)
  4. for...in
  