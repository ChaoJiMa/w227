1.js的组成部分    
    ecma    dom bom
2.文档对象模型
    由w3c提出的标准，是一个使用动态脚本访问和更新文档的内容，结构及样式
    dom提供了相应的API（接口），可以对文档进行增删改查，可以实现js对页面元素的控制，可以实现动态网页的功能
3.Html节点树   树状结构的文档
    文档
    html 根元素
4.节点的类型
    元素内的文本       text文本节点
    元素的属性         Attribute属性节点
    html里面的元素     element元素节点
    整个文档的文本节点 根节点html
    注释节点           comment
5.dom的辅助对象
    节点.childNodes 返回节点的所有子节点，不包含自己，包含空白换行文本节点
    元素节点
6.节点属性
    节点的名字  节点.nodeName
        元素节点    nodeName    标签名字，大写
        文本节点    #text
        属性节点    属性的名字
    节点的类型  节点.nodeType
        元素节点    1
        属性节点    2
        文本节点    3
    节点的值    节点.nodeVlaue
        元素节点的  null
        属性节点的  属性对应的值
        文本节点的  文本的内容
7.获取节点
    dom的辅助方法
        子节点  childNodes  children
        兄弟节点    sibling
        父节点  parentNode9
    id  getElementById('');
    class getElementsClassName('');
    标签    tag     getElementByTagName('');
    名字    name    getElementByName('');
    =========特殊元素获取==========
    body document.body
    html document.documentElement
    from表单 document.fromName  获取表单
    from表单 document.fromName.elementName  获取表单输入框内的元素
    =========选择器获取============
    tagName
    #id
    .class 
    selector1 selector2 后代>子代
    并集选择器
    交集选择器
    结构性伪类选择器
    属性选择器
    ui伪类选择器
    伪元素选择器
    兄弟选择器
    document.querySelector('.className');取类名获取第一个满足条件的元素，不是数组
    document.querySelectorAll('.className');取类名获取所有满足条件的元素，是数组
    querySelectorAll('#idName');通过id获取元素 
    注意querySelector,querySelectorAll获取不到动态添加的节点
    ========属性===============
        四种方式
            1.节点.attributes 获取节点的所有属性 返回的是数组,可以得到属性的个数（节点.attributes.length）
            2.节点.getAttribute(属性的名字)
            3.节点.getAttribute(属性的名字)返回值
            4.节点.属性的名字（注意className就代表类的属性）
                节点.id     节点.title
        属性的设置
            节点.属性名=属性的值;
            节点.setAttribute（属性的名字）
        样式的控制(获取或者修改样式)
            节点.style 改所有的样式，获取所有的行内样式
            节点.style.height
            节点.style.backgroundImage(小驼峰写法)
        直接修改class
            div.className='新添加的class'
            div.className=''
            上面的会把原来的class覆盖掉，如果不想影响原来的class用下面的方法
            div.classList.add('新添的class的名字')添加
            div.classList.remove('新添的class的名字')删除
        节点的操作
            创建节点
                元素节点document.createElement('li标签的名字');文本节点document.createTextNode('新加的');
                父节点.appendChild(子节点);
