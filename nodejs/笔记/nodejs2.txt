
1. src 与 href的区别[扩展]
2.  module.exports 与 exports

day02 mysql 模块
 
  1. 了解模块
  2. 下载模块
      npm install mysql
	  
  3. 使用模块
     3.1 引用模块 3.2 配置  3.3 使用
	 
 1. mysql 的使用步骤	
   1.1 引用模块
       const mysql  = require('mysql');
   1.2 创建连接
       const conn = mysql.createConnection({
	      host:'localhost',
		  user:'root',
		  password:'',
		  port:3306,
		  database:'w227'
	   })  
	   
   1.3 打开连接
　　　conn.connect();

   1.4 使用query方法，进行sql操作
      conn.query(sql语句,参数,回调函数)
	  
	  sql语句不要使用拼接，如果使用拼接，会容易补sql注入
	  怎么防止sql 注入
	  1. 对用户输入进行限制
	  2. 使用参数化查询
	  
   1.5 关闭连接   
      conn.end();

==================================================
2. 封装sql
const mysql = require('mysql');
function DbOper(sql,param,callback){
    const conn = mysql.createConnection({
        host:'localhost',
        user:'root',
        password:'',
        port:3306,
        database:'w227'
    });
    conn.connect();
    conn.query(sql,param,callback);
    conn.end();
}
module.exports={
    query:DbOper
}

3. ajax 
  ajax 被称为异步的javascript 和XML 
  无需要重新加载，实现无刷新的局部更新
  
  ajax属于javascript,是浏览器的一种技术 
  作用：从客户端发起一个请求，请求数据的
  
  ajax 发起请求的4个步骤
  1. 创建xhr 对象

   var xhr;
   if(XMLHttpRequest){
      xhr = new XMLHttpRequest();
   }else{
      xhr = new ActiveXObject('Microsoft.XMLHttp'); 
   }
   
  
  2. 使用open 打开连接(发起请求)
   xhr.open(请求的方式,请求的地址,同步/异步)
   请求的方式：get/post等
   同步/异步：true（异步）或 false（同步）

  3. 事件来处理响应回来的数据
  xhr.onreadystatechange = function(){
  
  }
  
  4. 发起请求 send
   xhr.send()
  
  
  
  
  客户端(浏览器上执行)       服务端(服务器处理)
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

